# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

pool:
  vmImage: ubuntu-latest

steps:
#- script: echo Hello, world!
#  displayName: 'Run a one-line script'

#- script: |
#    echo Add other tasks to build, test, and deploy your project.
#    echo See https://aka.ms/yaml
#  displayName: 'Run a multi-line script'

##########################################################
# Realizamos análisis de código estático con SonarCloud
##########################################################
- task: SonarCloudPrepare@1
  displayName: Configurar SonarCloud
  inputs:
    SonarCloud: 'sonarcloud'
    organization: 'devops-ort-g2'
    scannerMode: 'Other'
    projectKey: 'DevOps-ORT-G2_orders-service'

- script: mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=DevOps-ORT-G2_orders-service
  displayName: 'Ejecutar análisis de SonarCloud'

- task: SonarCloudPublish@1
  displayName: Publicar resultado de análisis SonarCloud
  inputs:
    pollingTimeoutSec: '300'

##########################################################
# Chequear status del análisis de SonarCloud
# Si falló no continua el pipeline
##########################################################

- task: sonarcloud-buildbreaker@2
  displayName: Check PASSED SonarCloud 
  inputs:
    SonarCloud: 'sonarcloud'
    organization: 'devops-ort-g2'

##########################################################
# Buildeamos el JAR
##########################################################

#- script: mvn install
#  displayName: Generar build del jar

- task: Maven@4
  displayName: Generar build del jar
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: false
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: true
    sqMavenPluginVersionChoice: 'latest'

#################################################################################################
# Previo a crear la imagen de docker
# Aprovisionamos un api gateway para tener un unico punto de acceso para las pruebas postman
# Levantamos este docker primero para siempre tener misma IP y dejar seteado en postman
#################################################################################################

- script: |
    conf="upstream orders {
        server 172.17.0.6:8080;
    }
    upstream products {
        server 172.17.0.3:8080;
    }
    upstream shipping {
        server 172.17.0.5:8080;
    }
    server {
        access_log /var/log/nginx/api_access.log main; # Each API may also log to a separate file
      
        listen 80;
        server_name _;
      
        location /orders {
            proxy_pass http://orders/orders/;
        }
        location /products {
            proxy_pass http://products/products/;
        }
        location /orders {
            proxy_pass http://shipping/shipping/;
        }
    }";
    docker pull nginx:1.21
    mkdir nginx-conf
    echo "$conf" > nginx-conf/api_gateway.conf
    cat nginx-conf/api_gateway.conf
    docker run --name api-gateway -v /home/vsts/work/1/s/nginx-conf/:/etc/nginx/conf.d/ -d nginx:1.21
    
  displayName: 'Aprovisionar API GATEWAY'

- script: docker inspect api-gateway | grep '"IPAddress":' -A 0 -m 1 | cut -f4 -d'"' 
  displayName: Consultar ip del docker api-gateway

#########################################################################################
# Clonamos repos de dependencia
# Buildeamos imagenes dockers de los MS y levantamos para realizar pruebas con postman
#########################################################################################


- script: |
    
    # clono repos
    git clone -b master --single-branch https://github.com/DevOps-ORT-G2/products-service.git ms-products
    git clone -b master --single-branch https://github.com/DevOps-ORT-G2/payments-service.git ms-payments
    git clone -b master --single-branch https://github.com/DevOps-ORT-G2/shipping-service.git ms-shipping
    
    # buildeo jars e imagenes dockers
    cd ms-products && mvn install && docker build --build-arg JAR_FILE=target/products-service-example-0.0.1-SNAPSHOT.jar -t products-service . 
    cd ../ms-payments && mvn install && docker build --build-arg JAR_FILE=target/payments-service-example-0.0.1-SNAPSHOT.jar -t payments-service . 
    cd ../ms-shipping && mvn install && docker build --build-arg JAR_FILE=target/shipping-service-example-0.0.1-SNAPSHOT.jar -t shipping-service . 
    
    # levanto dockers
    cd ..
    docker run -d --name products-service-test products-service 
    docker run -d --name payments-service-test payments-service 
    docker run -d --name shipping-service-test shipping-service 

  displayName: 'Aprovisionar MSs de dependencia'

- script: docker inspect products-service-test | grep '"IPAddress":' -A 0 -m 1 | cut -f4 -d'"' 
  displayName: Obtener ip del docker MS Products

- script: docker inspect payments-service-test | grep '"IPAddress":' -A 0 -m 1 | cut -f4 -d'"' 
  displayName: Obtener ip del docker MS Payments

- script: docker inspect shipping-service-test | grep '"IPAddress":' -A 0 -m 1 | cut -f4 -d'"' 
  displayName: Obtener ip del docker MS Shipping

#########################################################################################
# Buildeamos imagen docker del MS y levantamos para realizar pruebas con postman
#########################################################################################

- task: Docker@1
  displayName: Realizar build de imagen docker
  inputs:
    command: 'Build an image'
    dockerFile: '**/Dockerfile'
    arguments: '--build-arg JAR_FILE=target/orders-service-example-0.0.1-SNAPSHOT.jar'
    imageName: 'orders-service'

- script: docker run -d --name orders-service-test --env "APP_ARGS=http://172.17.0.4:8080 http://172.17.0.5:8080 http://172.17.0.3:8080" orders-service
  displayName: Levantar docker 

- script: docker inspect orders-service-test | grep '"IPAddress":' -A 0 -m 1 | cut -f4 -d'"' 
  displayName: Obtener ip del docker MS Orders

- script: docker ps -a
  displayName: Verificar dockers levantados

#########################################################################################
# Ejecutamos pruebas con newman desde un docker
#########################################################################################

- script: docker run -t postman/newman:alpine run "https://api.postman.com/collections/7660732-528f7410-f5fc-4384-90e8-1c51047ae661?access_key=PMAT-01GK386KMK98V7PK0DWH9J3FFJ" 
  displayName: Ejecutar test Postman


    
##########################################################
# Pusheamos la imagen de docker al ECR
##########################################################
#- task: ECRPushImage@1
#  inputs:
#    awsCredentials: 'AWS'
#    regionName: 'us-east-1'
#    imageSource: 'imagename'
#    sourceImageName: 'orders-service'
#    repositoryName: 'orders-service'
    